"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/querystringify";
exports.ids = ["vendor-chunks/querystringify"];
exports.modules = {

/***/ "(rsc)/./node_modules/querystringify/index.js":
/*!**********************************************!*\
  !*** ./node_modules/querystringify/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar has = Object.prototype.hasOwnProperty, undef;\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */ function decode(input) {\n    try {\n        return decodeURIComponent(input.replace(/\\+/g, \" \"));\n    } catch (e) {\n        return null;\n    }\n}\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */ function encode(input) {\n    try {\n        return encodeURIComponent(input);\n    } catch (e) {\n        return null;\n    }\n}\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */ function querystring(query) {\n    var parser = /([^=?#&]+)=?([^&]*)/g, result = {}, part;\n    while(part = parser.exec(query)){\n        var key = decode(part[1]), value = decode(part[2]);\n        //\n        // Prevent overriding of existing properties. This ensures that build-in\n        // methods like `toString` or __proto__ are not overriden by malicious\n        // querystrings.\n        //\n        // In the case if failed decoding, we want to omit the key/value pairs\n        // from the result.\n        //\n        if (key === null || value === null || key in result) continue;\n        result[key] = value;\n    }\n    return result;\n}\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */ function querystringify(obj, prefix) {\n    prefix = prefix || \"\";\n    var pairs = [], value, key;\n    //\n    // Optionally prefix with a '?' if needed\n    //\n    if (\"string\" !== typeof prefix) prefix = \"?\";\n    for(key in obj){\n        if (has.call(obj, key)) {\n            value = obj[key];\n            //\n            // Edge cases where we actually want to encode the value to an empty\n            // string instead of the stringified value.\n            //\n            if (!value && (value === null || value === undef || isNaN(value))) {\n                value = \"\";\n            }\n            key = encode(key);\n            value = encode(value);\n            //\n            // If we failed to encode the strings, we should bail out as we don't\n            // want to add invalid strings to the query.\n            //\n            if (key === null || value === null) continue;\n            pairs.push(key + \"=\" + value);\n        }\n    }\n    return pairs.length ? prefix + pairs.join(\"&\") : \"\";\n}\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmdpZnkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxNQUFNQyxPQUFPQyxTQUFTLENBQUNDLGNBQWMsRUFDckNDO0FBRUo7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsT0FBT0MsS0FBSztJQUNuQixJQUFJO1FBQ0YsT0FBT0MsbUJBQW1CRCxNQUFNRSxPQUFPLENBQUMsT0FBTztJQUNqRCxFQUFFLE9BQU9DLEdBQUc7UUFDVixPQUFPO0lBQ1Q7QUFDRjtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLE9BQU9KLEtBQUs7SUFDbkIsSUFBSTtRQUNGLE9BQU9LLG1CQUFtQkw7SUFDNUIsRUFBRSxPQUFPRyxHQUFHO1FBQ1YsT0FBTztJQUNUO0FBQ0Y7QUFFQTs7Ozs7O0NBTUMsR0FDRCxTQUFTRyxZQUFZQyxLQUFLO0lBQ3hCLElBQUlDLFNBQVMsd0JBQ1RDLFNBQVMsQ0FBQyxHQUNWQztJQUVKLE1BQU9BLE9BQU9GLE9BQU9HLElBQUksQ0FBQ0osT0FBUTtRQUNoQyxJQUFJSyxNQUFNYixPQUFPVyxJQUFJLENBQUMsRUFBRSxHQUNwQkcsUUFBUWQsT0FBT1csSUFBSSxDQUFDLEVBQUU7UUFFMUIsRUFBRTtRQUNGLHdFQUF3RTtRQUN4RSxzRUFBc0U7UUFDdEUsZ0JBQWdCO1FBQ2hCLEVBQUU7UUFDRixzRUFBc0U7UUFDdEUsbUJBQW1CO1FBQ25CLEVBQUU7UUFDRixJQUFJRSxRQUFRLFFBQVFDLFVBQVUsUUFBUUQsT0FBT0gsUUFBUTtRQUNyREEsTUFBTSxDQUFDRyxJQUFJLEdBQUdDO0lBQ2hCO0lBRUEsT0FBT0o7QUFDVDtBQUVBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTSyxlQUFlQyxHQUFHLEVBQUVDLE1BQU07SUFDakNBLFNBQVNBLFVBQVU7SUFFbkIsSUFBSUMsUUFBUSxFQUFFLEVBQ1ZKLE9BQ0FEO0lBRUosRUFBRTtJQUNGLHlDQUF5QztJQUN6QyxFQUFFO0lBQ0YsSUFBSSxhQUFhLE9BQU9JLFFBQVFBLFNBQVM7SUFFekMsSUFBS0osT0FBT0csSUFBSztRQUNmLElBQUlyQixJQUFJd0IsSUFBSSxDQUFDSCxLQUFLSCxNQUFNO1lBQ3RCQyxRQUFRRSxHQUFHLENBQUNILElBQUk7WUFFaEIsRUFBRTtZQUNGLG9FQUFvRTtZQUNwRSwyQ0FBMkM7WUFDM0MsRUFBRTtZQUNGLElBQUksQ0FBQ0MsU0FBVUEsQ0FBQUEsVUFBVSxRQUFRQSxVQUFVZixTQUFTcUIsTUFBTU4sTUFBSyxHQUFJO2dCQUNqRUEsUUFBUTtZQUNWO1lBRUFELE1BQU1SLE9BQU9RO1lBQ2JDLFFBQVFULE9BQU9TO1lBRWYsRUFBRTtZQUNGLHFFQUFxRTtZQUNyRSw0Q0FBNEM7WUFDNUMsRUFBRTtZQUNGLElBQUlELFFBQVEsUUFBUUMsVUFBVSxNQUFNO1lBQ3BDSSxNQUFNRyxJQUFJLENBQUNSLE1BQUssTUFBS0M7UUFDdkI7SUFDRjtJQUVBLE9BQU9JLE1BQU1JLE1BQU0sR0FBR0wsU0FBU0MsTUFBTUssSUFBSSxDQUFDLE9BQU87QUFDbkQ7QUFFQSxFQUFFO0FBQ0YscUJBQXFCO0FBQ3JCLEVBQUU7QUFDRkMsaUJBQWlCLEdBQUdUO0FBQ3BCUyxhQUFhLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmdpZnkvaW5kZXguanM/YmE2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgdW5kZWY7XG5cbi8qKlxuICogRGVjb2RlIGEgVVJJIGVuY29kZWQgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgVVJJIGVuY29kZWQgc3RyaW5nLlxuICogQHJldHVybnMge1N0cmluZ3xOdWxsfSBUaGUgZGVjb2RlZCBzdHJpbmcuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpbnB1dC5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGVuY29kZSBhIGdpdmVuIGlucHV0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgZW5jb2RlZC5cbiAqIEByZXR1cm5zIHtTdHJpbmd8TnVsbH0gVGhlIGVuY29kZWQgc3RyaW5nLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuICB0cnkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBTaW1wbGUgcXVlcnkgc3RyaW5nIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcXVlcnkgVGhlIHF1ZXJ5IHN0cmluZyB0aGF0IG5lZWRzIHRvIGJlIHBhcnNlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBxdWVyeXN0cmluZyhxdWVyeSkge1xuICB2YXIgcGFyc2VyID0gLyhbXj0/IyZdKyk9PyhbXiZdKikvZ1xuICAgICwgcmVzdWx0ID0ge31cbiAgICAsIHBhcnQ7XG5cbiAgd2hpbGUgKHBhcnQgPSBwYXJzZXIuZXhlYyhxdWVyeSkpIHtcbiAgICB2YXIga2V5ID0gZGVjb2RlKHBhcnRbMV0pXG4gICAgICAsIHZhbHVlID0gZGVjb2RlKHBhcnRbMl0pO1xuXG4gICAgLy9cbiAgICAvLyBQcmV2ZW50IG92ZXJyaWRpbmcgb2YgZXhpc3RpbmcgcHJvcGVydGllcy4gVGhpcyBlbnN1cmVzIHRoYXQgYnVpbGQtaW5cbiAgICAvLyBtZXRob2RzIGxpa2UgYHRvU3RyaW5nYCBvciBfX3Byb3RvX18gYXJlIG5vdCBvdmVycmlkZW4gYnkgbWFsaWNpb3VzXG4gICAgLy8gcXVlcnlzdHJpbmdzLlxuICAgIC8vXG4gICAgLy8gSW4gdGhlIGNhc2UgaWYgZmFpbGVkIGRlY29kaW5nLCB3ZSB3YW50IHRvIG9taXQgdGhlIGtleS92YWx1ZSBwYWlyc1xuICAgIC8vIGZyb20gdGhlIHJlc3VsdC5cbiAgICAvL1xuICAgIGlmIChrZXkgPT09IG51bGwgfHwgdmFsdWUgPT09IG51bGwgfHwga2V5IGluIHJlc3VsdCkgY29udGludWU7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgcXVlcnkgc3RyaW5nIHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9iamVjdCB0aGF0IHNob3VsZCBiZSB0cmFuc2Zvcm1lZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcmVmaXggT3B0aW9uYWwgcHJlZml4LlxuICogQHJldHVybnMge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5naWZ5KG9iaiwgcHJlZml4KSB7XG4gIHByZWZpeCA9IHByZWZpeCB8fCAnJztcblxuICB2YXIgcGFpcnMgPSBbXVxuICAgICwgdmFsdWVcbiAgICAsIGtleTtcblxuICAvL1xuICAvLyBPcHRpb25hbGx5IHByZWZpeCB3aXRoIGEgJz8nIGlmIG5lZWRlZFxuICAvL1xuICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBwcmVmaXgpIHByZWZpeCA9ICc/JztcblxuICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICB2YWx1ZSA9IG9ialtrZXldO1xuXG4gICAgICAvL1xuICAgICAgLy8gRWRnZSBjYXNlcyB3aGVyZSB3ZSBhY3R1YWxseSB3YW50IHRvIGVuY29kZSB0aGUgdmFsdWUgdG8gYW4gZW1wdHlcbiAgICAgIC8vIHN0cmluZyBpbnN0ZWFkIG9mIHRoZSBzdHJpbmdpZmllZCB2YWx1ZS5cbiAgICAgIC8vXG4gICAgICBpZiAoIXZhbHVlICYmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWYgfHwgaXNOYU4odmFsdWUpKSkge1xuICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgfVxuXG4gICAgICBrZXkgPSBlbmNvZGUoa2V5KTtcbiAgICAgIHZhbHVlID0gZW5jb2RlKHZhbHVlKTtcblxuICAgICAgLy9cbiAgICAgIC8vIElmIHdlIGZhaWxlZCB0byBlbmNvZGUgdGhlIHN0cmluZ3MsIHdlIHNob3VsZCBiYWlsIG91dCBhcyB3ZSBkb24ndFxuICAgICAgLy8gd2FudCB0byBhZGQgaW52YWxpZCBzdHJpbmdzIHRvIHRoZSBxdWVyeS5cbiAgICAgIC8vXG4gICAgICBpZiAoa2V5ID09PSBudWxsIHx8IHZhbHVlID09PSBudWxsKSBjb250aW51ZTtcbiAgICAgIHBhaXJzLnB1c2goa2V5ICsnPScrIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFpcnMubGVuZ3RoID8gcHJlZml4ICsgcGFpcnMuam9pbignJicpIDogJyc7XG59XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5leHBvcnRzLnN0cmluZ2lmeSA9IHF1ZXJ5c3RyaW5naWZ5O1xuZXhwb3J0cy5wYXJzZSA9IHF1ZXJ5c3RyaW5nO1xuIl0sIm5hbWVzIjpbImhhcyIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwidW5kZWYiLCJkZWNvZGUiLCJpbnB1dCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJlIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicXVlcnlzdHJpbmciLCJxdWVyeSIsInBhcnNlciIsInJlc3VsdCIsInBhcnQiLCJleGVjIiwia2V5IiwidmFsdWUiLCJxdWVyeXN0cmluZ2lmeSIsIm9iaiIsInByZWZpeCIsInBhaXJzIiwiY2FsbCIsImlzTmFOIiwicHVzaCIsImxlbmd0aCIsImpvaW4iLCJleHBvcnRzIiwic3RyaW5naWZ5IiwicGFyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/querystringify/index.js\n");

/***/ })

};
;